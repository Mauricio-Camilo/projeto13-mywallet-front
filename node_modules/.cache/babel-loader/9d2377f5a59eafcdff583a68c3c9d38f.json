{"ast":null,"code":"var _jsxFileName = \"/home/mauricio/Documentos/Driven/Projetos/projeto10-trackit/src/Componentes/TelaHabitos/InserirHabito.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useContext } from \"react\";\nimport UserContext from \"../contexts/UserContext\";\nimport styled from \"styled-components\";\nimport { Grid } from 'react-loader-spinner';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction InserirHabito(props) {\n  _s();\n\n  const loading = /*#__PURE__*/_jsxDEV(Grid, {\n    color: \"red\",\n    height: 50,\n    width: 80\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 21\n  }, this);\n\n  const {\n    setVisivel,\n    habito,\n    setHabito,\n    diasSelecionados,\n    setDiasSelecionados\n  } = props;\n  const {\n    token,\n    setToken\n  } = useContext(UserContext);\n  const config = {\n    headers: {\n      \"Authorization\": `Bearer ${token}`\n    }\n  };\n  const APIPost = \"https://mock-api.bootcamp.respondeai.com.br/api/v2/trackit/habits\"; // Estado criado para colocar a animação de loading no botão de salvar\n\n  const [salvar, setSalvar] = useState(\"Salvar\"); // Lista para fazer um map dos dias da semana e seus ids\n\n  const dias = [{\n    dia: \"D\",\n    id: 0\n  }, {\n    dia: \"S\",\n    id: 1\n  }, {\n    dia: \"T\",\n    id: 2\n  }, {\n    dia: \"Q\",\n    id: 3\n  }, {\n    dia: \"Q\",\n    id: 4\n  }, {\n    dia: \"S\",\n    id: 5\n  }, {\n    dia: \"S\",\n    id: 6\n  }]; // Estado usado para esconder a tela de criar hábitos ao clicar no botão cancelar\n\n  const [cancelarHabito, setCancelarHabito] = useState(false);\n\n  function selecionarDia(dia, id) {\n    const jaSelecionado = diasSelecionados.has(id); // Pergunta pro meu estado se ele já tem esse id, retorna true ou false\n\n    if (jaSelecionado) {\n      // Se eu já tinha selecionado e clicar de novo\n      diasSelecionados.delete(id); // eu preciso tirar o id do mapa\n\n      setDiasSelecionados(new Map(diasSelecionados)); // atualizo o mapa sem o id que acabei de clicar\n    } else {\n      // Se eu estou clicando pela primeira vez\n      setDiasSelecionados(new Map(diasSelecionados.set(id, dia))); // atualizo o mapa colocando as informações do id e do dia nele.\n    }\n  }\n  /* Função criada para colocar os estados em condição de esconder a tela de \n  criar hábitos e reabilitar o botão de + no componente pai de inserir hábitos */\n\n\n  function ResetarHabito() {\n    setCancelarHabito(true);\n    setVisivel(false);\n    setHabito();\n    setDiasSelecionados(new Map());\n  }\n  /* Função que faz o post para o servidor do hábito criado, e também faz o efeito\n  de cancelar, para colocar a tela no estado inicial */\n\n\n  function SalvarHabito() {\n    console.log(\"fui clicado\");\n    setSalvar(loading);\n    const promise = axios.post(APIPost, {\n      name: habito,\n      days: [...diasSelecionados.keys()] // Pega apenas os ids do mapa\n\n    }, config);\n    promise.then(response => {\n      const {\n        data\n      } = response;\n      console.log(data);\n      console.log(\"deu bom\");\n      ResetarHabito();\n    });\n    promise.catch(response => {\n      alert(\"Falha no envio dos dados, por favor tente novamente\");\n      ResetarHabito();\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: cancelarHabito ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"nome do h\\xE1bito\",\n        onChange: e => setHabito(e.target.value),\n        value: habito\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Days, {\n        children: dias.map(dia => {\n          const checkSelecionado = diasSelecionados.has(dia.id); // Meus dias selecionados tem esse id? Lembrando que o id é iterado\n          // Cada vez que clico em um dia, o estado é alterado, então o componente é novamente renderizado.\n          // Ao clicar, eu atualizo meu mapa, então esse if vai achar o id no mapa\n          // Ao achar o id no mapa, vai alterar a prop abaixo de selecionado para true\n\n          return /*#__PURE__*/_jsxDEV(DayWeek, {\n            selecionado: checkSelecionado,\n            onClick: () => selecionarDia(dia.dia, dia.id),\n            children: dia.dia\n          }, dia.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Actions, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          onClick: () => ResetarHabito(),\n          children: \"Cancelar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => SalvarHabito(),\n          children: salvar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}\n/* Função que responde a um determinado estado vindo do mapa por props que vai alterar\na cor do botão ao clicar no dia da semana, a cor depende apenas do estado */\n\n\n_s(InserirHabito, \"hLbzt7akgnQD8qj1ub3zTtFx5nQ=\");\n\n_c = InserirHabito;\n\nfunction corBotao(selecionado) {\n  if (selecionado) return \"gray\";else return \"white\";\n}\n\nconst Container = styled.div`\n    width: 340px;\n    height: 200px;\n    border-radius: 5px;\n    margin: 0 auto;\n    margin-bottom: 28px;\n    background-color: #FFFFFF;\n\n        input {\n            width: 303px;\n            height: 45px;\n            font-size: 20px;\n            color: var(--cor-cinza-input);\n            border-radius: 5px;\n            border: 1px solid var(--cor-cinza-borda);\n            margin: 18px 19px;\n            padding-left: 11px;\n        }\n`;\n_c2 = Container;\nconst DayWeek = styled.button`\n    font-size: 19px;\n    color: var(--cor-cinza-borda);\n    width: 30px;\n    height: 30px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 5px;\n    border: 1px solid var(--cor-cinza-borda);\n    margin-left: 19px;\n    margin-right: 1px;\n    background-color: ${props => corBotao(props.selecionado)}; \n`; // Essa props selecionado serve para ver se eu cliquei ou não no dia\n// Quando o botão é clicado, ele chama essa função pata alterar a cor dependendo do clique.\n\n_c3 = DayWeek;\nconst Days = styled.div`\n\n    display: flex;\n    padding-right: 50px;\n    background-color: white;\n`;\n_c4 = Days;\nconst Actions = styled.div`\n    display: flex;\n    justify-content: right;\n    align-items: center;\n    padding-top: 29px;\n    padding-right: 16px;\n\n\n        p {\n            font-size: 16px;\n            color: var(--cor-botao-footer);\n        }\n\n        button {\n            font-size: 16px;\n            color: #FFFFFF;\n            width: 84px;\n            height: 35px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            border-radius: 5px;\n            margin-left: 19px;\n            pointer-events: none;\n            background-color: var(--cor-botao-footer);\n        }\n`;\n_c5 = Actions;\nexport default InserirHabito;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"InserirHabito\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"DayWeek\");\n$RefreshReg$(_c4, \"Days\");\n$RefreshReg$(_c5, \"Actions\");","map":{"version":3,"sources":["/home/mauricio/Documentos/Driven/Projetos/projeto10-trackit/src/Componentes/TelaHabitos/InserirHabito.js"],"names":["useState","useContext","UserContext","styled","Grid","axios","InserirHabito","props","loading","setVisivel","habito","setHabito","diasSelecionados","setDiasSelecionados","token","setToken","config","headers","APIPost","salvar","setSalvar","dias","dia","id","cancelarHabito","setCancelarHabito","selecionarDia","jaSelecionado","has","delete","Map","set","ResetarHabito","SalvarHabito","console","log","promise","post","name","days","keys","then","response","data","catch","alert","e","target","value","map","checkSelecionado","corBotao","selecionado","Container","div","DayWeek","button","Days","Actions"],"mappings":"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","sourcesContent":["import { useState, useContext } from \"react\";\nimport UserContext from \"../contexts/UserContext\";\n\nimport styled from \"styled-components\";\nimport { Grid } from  'react-loader-spinner';\n\nimport axios from \"axios\";\n\nfunction InserirHabito(props) {\n\n    const loading = <Grid color=\"red\" height={50} width={80} />;  \n\n    const {setVisivel, habito, setHabito, \n    diasSelecionados, setDiasSelecionados} = props;\n\n    const { token, setToken } = useContext(UserContext);\n\n    const config = {\n        headers: {\n            \"Authorization\": `Bearer ${token}`\n        }\n    }\n\n    const APIPost = \"https://mock-api.bootcamp.respondeai.com.br/api/v2/trackit/habits\";\n\n    // Estado criado para colocar a animação de loading no botão de salvar\n    const [salvar, setSalvar] = useState(\"Salvar\");\n\n    // Lista para fazer um map dos dias da semana e seus ids\n    const dias = [{ dia: \"D\", id: 0 }, { dia: \"S\", id: 1 }, { dia: \"T\", id: 2 },\n    { dia: \"Q\", id: 3 }, { dia: \"Q\", id: 4 }, { dia: \"S\", id: 5 }, { dia: \"S\", id: 6 },]\n\n    // Estado usado para esconder a tela de criar hábitos ao clicar no botão cancelar\n    const [cancelarHabito, setCancelarHabito] = useState(false);\n\n    function selecionarDia(dia, id) {\n        const jaSelecionado = diasSelecionados.has(id); // Pergunta pro meu estado se ele já tem esse id, retorna true ou false\n        if (jaSelecionado) { // Se eu já tinha selecionado e clicar de novo\n            diasSelecionados.delete(id); // eu preciso tirar o id do mapa\n            setDiasSelecionados(new Map(diasSelecionados)); // atualizo o mapa sem o id que acabei de clicar\n        }\n        else { // Se eu estou clicando pela primeira vez\n            setDiasSelecionados(new Map(diasSelecionados.set(id, dia)));\n            // atualizo o mapa colocando as informações do id e do dia nele.\n        }\n    }\n\n/* Função criada para colocar os estados em condição de esconder a tela de \ncriar hábitos e reabilitar o botão de + no componente pai de inserir hábitos */\n    function ResetarHabito() {\n        setCancelarHabito(true);\n        setVisivel(false);\n        setHabito();\n        setDiasSelecionados(new Map());\n    }\n\n/* Função que faz o post para o servidor do hábito criado, e também faz o efeito\nde cancelar, para colocar a tela no estado inicial */\n    function SalvarHabito() {\n        console.log(\"fui clicado\");\n        setSalvar(loading);\n        const promise = axios.post(APIPost, {\n            name: habito,\n            days: [...diasSelecionados.keys()] // Pega apenas os ids do mapa\n        }, config);\n        promise.then(response => {\n            const { data } = response;\n            console.log(data);\n            console.log(\"deu bom\");\n            ResetarHabito();\n        }\n        )\n        promise.catch(response => {\n            alert(\"Falha no envio dos dados, por favor tente novamente\");\n            ResetarHabito();\n        })\n    }\n\n    return (\n        <>\n            {cancelarHabito ?\n                <></> :\n                <Container>\n                    <input type=\"text\" placeholder=\"nome do hábito\"\n                        onChange={(e) => setHabito(e.target.value)}\n                        value={habito}>\n                    </input>\n                    <Days>\n                        {dias.map(dia => {\n                            const checkSelecionado = diasSelecionados.has(dia.id)\n                            // Meus dias selecionados tem esse id? Lembrando que o id é iterado\n                            // Cada vez que clico em um dia, o estado é alterado, então o componente é novamente renderizado.\n                            // Ao clicar, eu atualizo meu mapa, então esse if vai achar o id no mapa\n                            // Ao achar o id no mapa, vai alterar a prop abaixo de selecionado para true\n                            return (\n                                <DayWeek key={dia.id} selecionado={checkSelecionado} onClick={() => selecionarDia(dia.dia, dia.id)}>\n                                    {dia.dia}\n                                </DayWeek>)\n                        }\n                        )}\n                    </Days>\n                    <Actions>\n                        <p onClick={() => ResetarHabito()}>Cancelar</p>\n                        <button onClick={() => SalvarHabito()}>{salvar}</button>\n                    </Actions>\n                </Container>\n            }\n        </>\n    )\n}\n\n/* Função que responde a um determinado estado vindo do mapa por props que vai alterar\na cor do botão ao clicar no dia da semana, a cor depende apenas do estado */\nfunction corBotao(selecionado) {\n    if (selecionado) return \"gray\";\n    else return \"white\";\n}\n\nconst Container = styled.div`\n    width: 340px;\n    height: 200px;\n    border-radius: 5px;\n    margin: 0 auto;\n    margin-bottom: 28px;\n    background-color: #FFFFFF;\n\n        input {\n            width: 303px;\n            height: 45px;\n            font-size: 20px;\n            color: var(--cor-cinza-input);\n            border-radius: 5px;\n            border: 1px solid var(--cor-cinza-borda);\n            margin: 18px 19px;\n            padding-left: 11px;\n        }\n`\n\nconst DayWeek = styled.button`\n    font-size: 19px;\n    color: var(--cor-cinza-borda);\n    width: 30px;\n    height: 30px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 5px;\n    border: 1px solid var(--cor-cinza-borda);\n    margin-left: 19px;\n    margin-right: 1px;\n    background-color: ${(props) => corBotao(props.selecionado)}; \n`\n// Essa props selecionado serve para ver se eu cliquei ou não no dia\n// Quando o botão é clicado, ele chama essa função pata alterar a cor dependendo do clique.\n\nconst Days = styled.div`\n\n    display: flex;\n    padding-right: 50px;\n    background-color: white;\n`\nconst Actions = styled.div`\n    display: flex;\n    justify-content: right;\n    align-items: center;\n    padding-top: 29px;\n    padding-right: 16px;\n\n\n        p {\n            font-size: 16px;\n            color: var(--cor-botao-footer);\n        }\n\n        button {\n            font-size: 16px;\n            color: #FFFFFF;\n            width: 84px;\n            height: 35px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            border-radius: 5px;\n            margin-left: 19px;\n            pointer-events: none;\n            background-color: var(--cor-botao-footer);\n        }\n`\n\nexport default InserirHabito;\n\n"]},"metadata":{},"sourceType":"module"}